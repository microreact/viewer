/* eslint-disable no-bitwise */

import createEmojiRegex from "emoji-regex";
import { Angles } from "@phylocanvas/phylocanvas.gl";

import defaults from "../defaults";

const Flags = {
  ad: "ğŸ‡¦ğŸ‡©",
  ae: "ğŸ‡¦ğŸ‡ª",
  af: "ğŸ‡¦ğŸ‡«",
  ag: "ğŸ‡¦ğŸ‡¬",
  ai: "ğŸ‡¦ğŸ‡®",
  al: "ğŸ‡¦ğŸ‡±",
  am: "ğŸ‡¦ğŸ‡²",
  ao: "ğŸ‡¦ğŸ‡´",
  aq: "ğŸ‡¦ğŸ‡¶",
  ar: "ğŸ‡¦ğŸ‡·",
  as: "ğŸ‡¦ğŸ‡¸",
  at: "ğŸ‡¦ğŸ‡¹",
  au: "ğŸ‡¦ğŸ‡º",
  aw: "ğŸ‡¦ğŸ‡¼",
  ax: "ğŸ‡¦ğŸ‡½",
  az: "ğŸ‡¦ğŸ‡¿",
  ba: "ğŸ‡§ğŸ‡¦",
  bb: "ğŸ‡§ğŸ‡§",
  bd: "ğŸ‡§ğŸ‡©",
  be: "ğŸ‡§ğŸ‡ª",
  bf: "ğŸ‡§ğŸ‡«",
  bg: "ğŸ‡§ğŸ‡¬",
  bh: "ğŸ‡§ğŸ‡­",
  bi: "ğŸ‡§ğŸ‡®",
  bj: "ğŸ‡§ğŸ‡¯",
  bl: "ğŸ‡§ğŸ‡±",
  bm: "ğŸ‡§ğŸ‡²",
  bn: "ğŸ‡§ğŸ‡³",
  bo: "ğŸ‡§ğŸ‡´",
  bq: "ğŸ‡§ğŸ‡¶",
  br: "ğŸ‡§ğŸ‡·",
  bs: "ğŸ‡§ğŸ‡¸",
  bt: "ğŸ‡§ğŸ‡¹",
  bv: "ğŸ‡§ğŸ‡»",
  bw: "ğŸ‡§ğŸ‡¼",
  by: "ğŸ‡§ğŸ‡¾",
  bz: "ğŸ‡§ğŸ‡¿",
  ca: "ğŸ‡¨ğŸ‡¦",
  cc: "ğŸ‡¨ğŸ‡¨",
  cd: "ğŸ‡¨ğŸ‡©",
  cf: "ğŸ‡¨ğŸ‡«",
  cg: "ğŸ‡¨ğŸ‡¬",
  ch: "ğŸ‡¨ğŸ‡­",
  ci: "ğŸ‡¨ğŸ‡®",
  ck: "ğŸ‡¨ğŸ‡°",
  cl: "ğŸ‡¨ğŸ‡±",
  cm: "ğŸ‡¨ğŸ‡²",
  cn: "ğŸ‡¨ğŸ‡³",
  co: "ğŸ‡¨ğŸ‡´",
  cr: "ğŸ‡¨ğŸ‡·",
  cu: "ğŸ‡¨ğŸ‡º",
  cv: "ğŸ‡¨ğŸ‡»",
  cw: "ğŸ‡¨ğŸ‡¼",
  cx: "ğŸ‡¨ğŸ‡½",
  cy: "ğŸ‡¨ğŸ‡¾",
  cz: "ğŸ‡¨ğŸ‡¿",
  de: "ğŸ‡©ğŸ‡ª",
  dj: "ğŸ‡©ğŸ‡¯",
  dk: "ğŸ‡©ğŸ‡°",
  dm: "ğŸ‡©ğŸ‡²",
  do: "ğŸ‡©ğŸ‡´",
  dz: "ğŸ‡©ğŸ‡¿",
  ec: "ğŸ‡ªğŸ‡¨",
  ee: "ğŸ‡ªğŸ‡ª",
  eg: "ğŸ‡ªğŸ‡¬",
  eh: "ğŸ‡ªğŸ‡­",
  er: "ğŸ‡ªğŸ‡·",
  es: "ğŸ‡ªğŸ‡¸",
  et: "ğŸ‡ªğŸ‡¹",
  eu: "ğŸ‡ªğŸ‡º",
  fi: "ğŸ‡«ğŸ‡®",
  fj: "ğŸ‡«ğŸ‡¯",
  fk: "ğŸ‡«ğŸ‡°",
  fm: "ğŸ‡«ğŸ‡²",
  fo: "ğŸ‡«ğŸ‡´",
  fr: "ğŸ‡«ğŸ‡·",
  ga: "ğŸ‡¬ğŸ‡¦",
  gb: "ğŸ‡¬ğŸ‡§",
  gd: "ğŸ‡¬ğŸ‡©",
  ge: "ğŸ‡¬ğŸ‡ª",
  gf: "ğŸ‡¬ğŸ‡«",
  gg: "ğŸ‡¬ğŸ‡¬",
  gh: "ğŸ‡¬ğŸ‡­",
  gi: "ğŸ‡¬ğŸ‡®",
  gl: "ğŸ‡¬ğŸ‡±",
  gm: "ğŸ‡¬ğŸ‡²",
  gn: "ğŸ‡¬ğŸ‡³",
  gp: "ğŸ‡¬ğŸ‡µ",
  gq: "ğŸ‡¬ğŸ‡¶",
  gr: "ğŸ‡¬ğŸ‡·",
  gs: "ğŸ‡¬ğŸ‡¸",
  gt: "ğŸ‡¬ğŸ‡¹",
  gu: "ğŸ‡¬ğŸ‡º",
  gw: "ğŸ‡¬ğŸ‡¼",
  gy: "ğŸ‡¬ğŸ‡¾",
  hk: "ğŸ‡­ğŸ‡°",
  hm: "ğŸ‡­ğŸ‡²",
  hn: "ğŸ‡­ğŸ‡³",
  hr: "ğŸ‡­ğŸ‡·",
  ht: "ğŸ‡­ğŸ‡¹",
  hu: "ğŸ‡­ğŸ‡º",
  id: "ğŸ‡®ğŸ‡©",
  ie: "ğŸ‡®ğŸ‡ª",
  il: "ğŸ‡®ğŸ‡±",
  im: "ğŸ‡®ğŸ‡²",
  in: "ğŸ‡®ğŸ‡³",
  io: "ğŸ‡®ğŸ‡´",
  iq: "ğŸ‡®ğŸ‡¶",
  ir: "ğŸ‡®ğŸ‡·",
  is: "ğŸ‡®ğŸ‡¸",
  it: "ğŸ‡®ğŸ‡¹",
  je: "ğŸ‡¯ğŸ‡ª",
  jm: "ğŸ‡¯ğŸ‡²",
  jo: "ğŸ‡¯ğŸ‡´",
  jp: "ğŸ‡¯ğŸ‡µ",
  ke: "ğŸ‡°ğŸ‡ª",
  kg: "ğŸ‡°ğŸ‡¬",
  kh: "ğŸ‡°ğŸ‡­",
  ki: "ğŸ‡°ğŸ‡®",
  km: "ğŸ‡°ğŸ‡²",
  kn: "ğŸ‡°ğŸ‡³",
  kp: "ğŸ‡°ğŸ‡µ",
  kr: "ğŸ‡°ğŸ‡·",
  kw: "ğŸ‡°ğŸ‡¼",
  ky: "ğŸ‡°ğŸ‡¾",
  kz: "ğŸ‡°ğŸ‡¿",
  la: "ğŸ‡±ğŸ‡¦",
  lb: "ğŸ‡±ğŸ‡§",
  lc: "ğŸ‡±ğŸ‡¨",
  li: "ğŸ‡±ğŸ‡®",
  lk: "ğŸ‡±ğŸ‡°",
  lr: "ğŸ‡±ğŸ‡·",
  ls: "ğŸ‡±ğŸ‡¸",
  lt: "ğŸ‡±ğŸ‡¹",
  lu: "ğŸ‡±ğŸ‡º",
  lv: "ğŸ‡±ğŸ‡»",
  ly: "ğŸ‡±ğŸ‡¾",
  ma: "ğŸ‡²ğŸ‡¦",
  mc: "ğŸ‡²ğŸ‡¨",
  md: "ğŸ‡²ğŸ‡©",
  me: "ğŸ‡²ğŸ‡ª",
  mf: "ğŸ‡²ğŸ‡«",
  mg: "ğŸ‡²ğŸ‡¬",
  mh: "ğŸ‡²ğŸ‡­",
  mk: "ğŸ‡²ğŸ‡°",
  ml: "ğŸ‡²ğŸ‡±",
  mm: "ğŸ‡²ğŸ‡²",
  mn: "ğŸ‡²ğŸ‡³",
  mo: "ğŸ‡²ğŸ‡´",
  mp: "ğŸ‡²ğŸ‡µ",
  mq: "ğŸ‡²ğŸ‡¶",
  mr: "ğŸ‡²ğŸ‡·",
  ms: "ğŸ‡²ğŸ‡¸",
  mt: "ğŸ‡²ğŸ‡¹",
  mu: "ğŸ‡²ğŸ‡º",
  mv: "ğŸ‡²ğŸ‡»",
  mw: "ğŸ‡²ğŸ‡¼",
  mx: "ğŸ‡²ğŸ‡½",
  my: "ğŸ‡²ğŸ‡¾",
  mz: "ğŸ‡²ğŸ‡¿",
  na: "ğŸ‡³ğŸ‡¦",
  nc: "ğŸ‡³ğŸ‡¨",
  ne: "ğŸ‡³ğŸ‡ª",
  nf: "ğŸ‡³ğŸ‡«",
  ng: "ğŸ‡³ğŸ‡¬",
  ni: "ğŸ‡³ğŸ‡®",
  nl: "ğŸ‡³ğŸ‡±",
  no: "ğŸ‡³ğŸ‡´",
  np: "ğŸ‡³ğŸ‡µ",
  nr: "ğŸ‡³ğŸ‡·",
  nu: "ğŸ‡³ğŸ‡º",
  nz: "ğŸ‡³ğŸ‡¿",
  om: "ğŸ‡´ğŸ‡²",
  pa: "ğŸ‡µğŸ‡¦",
  pe: "ğŸ‡µğŸ‡ª",
  pf: "ğŸ‡µğŸ‡«",
  pg: "ğŸ‡µğŸ‡¬",
  ph: "ğŸ‡µğŸ‡­",
  pk: "ğŸ‡µğŸ‡°",
  pl: "ğŸ‡µğŸ‡±",
  pm: "ğŸ‡µğŸ‡²",
  pn: "ğŸ‡µğŸ‡³",
  pr: "ğŸ‡µğŸ‡·",
  ps: "ğŸ‡µğŸ‡¸",
  pt: "ğŸ‡µğŸ‡¹",
  pw: "ğŸ‡µğŸ‡¼",
  py: "ğŸ‡µğŸ‡¾",
  qa: "ğŸ‡¶ğŸ‡¦",
  re: "ğŸ‡·ğŸ‡ª",
  ro: "ğŸ‡·ğŸ‡´",
  rs: "ğŸ‡·ğŸ‡¸",
  ru: "ğŸ‡·ğŸ‡º",
  rw: "ğŸ‡·ğŸ‡¼",
  sa: "ğŸ‡¸ğŸ‡¦",
  sb: "ğŸ‡¸ğŸ‡§",
  sc: "ğŸ‡¸ğŸ‡¨",
  sd: "ğŸ‡¸ğŸ‡©",
  se: "ğŸ‡¸ğŸ‡ª",
  sg: "ğŸ‡¸ğŸ‡¬",
  sh: "ğŸ‡¸ğŸ‡­",
  si: "ğŸ‡¸ğŸ‡®",
  sj: "ğŸ‡¸ğŸ‡¯",
  sk: "ğŸ‡¸ğŸ‡°",
  sl: "ğŸ‡¸ğŸ‡±",
  sm: "ğŸ‡¸ğŸ‡²",
  sn: "ğŸ‡¸ğŸ‡³",
  so: "ğŸ‡¸ğŸ‡´",
  sr: "ğŸ‡¸ğŸ‡·",
  ss: "ğŸ‡¸ğŸ‡¸",
  st: "ğŸ‡¸ğŸ‡¹",
  sv: "ğŸ‡¸ğŸ‡»",
  sx: "ğŸ‡¸ğŸ‡½",
  sy: "ğŸ‡¸ğŸ‡¾",
  sz: "ğŸ‡¸ğŸ‡¿",
  tc: "ğŸ‡¹ğŸ‡¨",
  td: "ğŸ‡¹ğŸ‡©",
  tf: "ğŸ‡¹ğŸ‡«",
  tg: "ğŸ‡¹ğŸ‡¬",
  th: "ğŸ‡¹ğŸ‡­",
  tj: "ğŸ‡¹ğŸ‡¯",
  tk: "ğŸ‡¹ğŸ‡°",
  tl: "ğŸ‡¹ğŸ‡±",
  tm: "ğŸ‡¹ğŸ‡²",
  tn: "ğŸ‡¹ğŸ‡³",
  to: "ğŸ‡¹ğŸ‡´",
  tr: "ğŸ‡¹ğŸ‡·",
  tt: "ğŸ‡¹ğŸ‡¹",
  tv: "ğŸ‡¹ğŸ‡»",
  tw: "ğŸ‡¹ğŸ‡¼",
  tz: "ğŸ‡¹ğŸ‡¿",
  ua: "ğŸ‡ºğŸ‡¦",
  ug: "ğŸ‡ºğŸ‡¬",
  um: "ğŸ‡ºğŸ‡²",
  us: "ğŸ‡ºğŸ‡¸",
  uy: "ğŸ‡ºğŸ‡¾",
  uz: "ğŸ‡ºğŸ‡¿",
  va: "ğŸ‡»ğŸ‡¦",
  vc: "ğŸ‡»ğŸ‡¨",
  ve: "ğŸ‡»ğŸ‡ª",
  vg: "ğŸ‡»ğŸ‡¬",
  vi: "ğŸ‡»ğŸ‡®",
  vn: "ğŸ‡»ğŸ‡³",
  vu: "ğŸ‡»ğŸ‡º",
  wf: "ğŸ‡¼ğŸ‡«",
  ws: "ğŸ‡¼ğŸ‡¸",
  ye: "ğŸ‡¾ğŸ‡ª",
  yt: "ğŸ‡¾ğŸ‡¹",
  za: "ğŸ‡¿ğŸ‡¦",
  zm: "ğŸ‡¿ğŸ‡²",
  zw: "ğŸ‡¿ğŸ‡¼",
};

const isEmojiRegexp = new RegExp(createEmojiRegex().source, "i");

function star(ctx, x, y, MARKER_CENTRE, spikes = 5) {
  const outerRadius = MARKER_CENTRE;
  const innerRadius = outerRadius * 0.5;
  const step = (Math.PI / spikes);

  let rot = Math.PI / 2 * 3;
  ctx.moveTo(x, y - outerRadius);
  for (let i = 0; i < spikes; i++) {
    ctx.lineTo(x + Math.cos(rot) * outerRadius, y + Math.sin(rot) * outerRadius);
    rot += step;
    ctx.lineTo(x + Math.cos(rot) * innerRadius, y + Math.sin(rot) * innerRadius);
    rot += step;
  }
  ctx.lineTo(x, y - outerRadius);
}

function polygon(ctx, x, y, MARKER_CENTRE, sides) {
  const startAngle = (Math.PI / 2 * 3);
  const step = (2 * Math.PI / sides);
  ctx.moveTo(
    x + MARKER_CENTRE * Math.cos(startAngle),
    y + MARKER_CENTRE * Math.sin(startAngle),
  );
  for (let i = 1; i <= sides; i += 1) {
    ctx.lineTo(
      x + MARKER_CENTRE * Math.cos(startAngle + i * step),
      y + MARKER_CENTRE * Math.sin(startAngle + i * step),
    );
  }
}

let canvas;
function getDrawingContext() {
  if (!canvas) {
    canvas = document.createElement("canvas");
    canvas.width = 32;
    canvas.height = 32;
  }
  return canvas.getContext("2d");
}

export function drawShape(ctx, x, y, radius, shape, colour, highlightColour, borderWidth = 1, borderStyle = "rgba(0, 0, 0, 0.56)") {
  if (radius <= 0 || shape === "none") {
    return;
  }

  ctx.fillStyle = colour;

  if (shape in Flags) {
    const font = ctx.font;
    ctx.font = `${radius * 2}px Segoe UI Emoji`;
    ctx.textAlign = "center";
    ctx.textBaseline = "top";
    ctx.fillText(Flags[shape], x, y - radius / 2);
    ctx.font = font;
  }
  else if (isEmojiRegexp.test(shape)) {
    ctx.font = `${radius * 2}px Segoe UI Emoji`;
    ctx.textAlign = "center";
    ctx.textBaseline = "top";
    ctx.fillText(shape, x, y - radius / 2);
  }
  else {
    ctx.beginPath();
    if (shape === "dot") {
      ctx.arc(x, y, ctx.lineWidth * 2, Angles.Degrees0, Angles.Degrees360);
    }
    else if (shape === "circle") {
      ctx.arc(x, y, radius, Angles.Degrees0, Angles.Degrees360);
    }
    else if (shape === "square") {
      ctx.rect(x - radius, y - radius, radius * 2, radius * 2);
    }
    else if (shape === "triangle") {
      ctx.moveTo(x, y - radius);
      ctx.lineTo(x + radius, y + radius);
      ctx.lineTo(x - radius, y + radius);
      ctx.lineTo(x, y - radius);
    }
    else if (shape === "star") {
      star(ctx, x, y, radius, 5);
    }
    else if (shape === "hexastar") {
      star(ctx, x, y, radius, 6);
    }
    else if (shape === "heptastar") {
      star(ctx, x, y, radius, 7);
    }
    else if (shape === "octastar") {
      star(ctx, x, y, radius, 8);
    }
    else if (shape === "pentagon") {
      polygon(ctx, x, y, radius, 5);
    }
    else if (shape === "hexagon") {
      polygon(ctx, x, y, radius, 6);
    }
    else if (shape === "heptagon") {
      polygon(ctx, x, y, radius, 7);
    }
    else if (shape === "octagon") {
      polygon(ctx, x, y, radius, 8);
    }
    else {
      console.error("Invalid shape", shape);
    }
    ctx.fill();

    if (borderWidth > 0) {
      ctx.strokeStyle = borderStyle;
      ctx.lineWidth = borderWidth;
      ctx.stroke();
    }
    ctx.closePath();
  }

  if (highlightColour) {
    // drawHalo(ctx, x, y, radius, highlightColour);
    ctx.strokeStyle = highlightColour;
    const lineWidth = ctx.lineWidth;
    ctx.lineWidth = defaults.highlight.width;
    ctx.beginPath();
    ctx.arc(x, y, radius + defaults.NODE_RADIUS + Math.floor((radius / defaults.NODE_RADIUS) / 2), 0, Math.PI * 2, false);
    ctx.closePath();
    ctx.stroke();
    ctx.lineWidth = lineWidth;
  }
}

export function drawPieChart(ctx, x, y, radius, slices, highlight = false, borderWidth = 1) {
  let startingAngle = 0;
  for (const colour of Object.keys(slices)) {
    ctx.fillStyle = colour;
    ctx.beginPath();
    ctx.moveTo(x, y);
    const endingAngle = startingAngle + (Math.PI * 2 * slices[colour]);
    // Arc Parameters: x, y, radius, startingAngle (radians), endingAngle (radians), antiClockwise (boolean)
    ctx.arc(x, y, radius, startingAngle, endingAngle, false);
    ctx.fill();
    ctx.closePath();
    startingAngle = endingAngle;
  }

  if (borderWidth > 0) {
    ctx.beginPath();
    ctx.arc(x, y, radius, Angles.Degrees0, Angles.Degrees360);
    ctx.strokeStyle = "rgba(0, 0, 0, 0.56)";
    ctx.strokeWidth = borderWidth;
    ctx.stroke();
    ctx.closePath();
  }

  if (highlight) {
    ctx.strokeStyle = defaults.HIGHLIGHT_COLOUR;
    ctx.lineWidth = defaults.HIGHLIGHT_WIDTH;
    ctx.beginPath();
    ctx.arc(x, y, radius * 2, 0, Math.PI * 2, false);
    ctx.closePath();
    ctx.stroke();
    ctx.lineWidth = borderWidth;
  }
}

export function getGroupedColours(rows) {
  const groupedData = {};
  let sum = 0;
  for (const row of rows) {
    const colour = row["--microreact-colour"];
    const magnitude = row["--mr-scalar"] ?? 1;
    sum += magnitude;
    if (!groupedData[colour]) {
      groupedData[colour] = magnitude;
    }
    else {
      groupedData[colour] += magnitude;
    }
  }
  for (const colour of Object.keys(groupedData)) {
    groupedData[colour] /= sum;
  }
  return groupedData;
}

export function shapeToImage(width, height, size, shape, colour, highlightColour) {
  const ctx = getDrawingContext();
  ctx.clearRect(0, 0, width, height);
  drawShape(
    ctx,
    width,
    height,
    size,
    shape,
    colour,
    highlightColour,
  );
  return canvas.toDataURL();
}

export function hexToRgba(hex, alpha = 0.08) {
  const bigint = parseInt(hex.substr(1), 16);
  const r = (bigint >> 16) & 255;
  const g = (bigint >> 8) & 255;
  const b = bigint & 255;
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}
